[{"E:\\ReactJS\\demo-webcam\\src\\App.tsx":"1","E:\\ReactJS\\demo-webcam\\src\\index.tsx":"2","E:\\ReactJS\\demo-webcam\\src\\reportWebVitals.ts":"3","E:\\ReactJS\\demo-webcam\\src\\components\\webcam.tsx":"4"},{"size":385,"mtime":1609726669788,"results":"5","hashOfConfig":"6"},{"size":500,"mtime":1609389840446,"results":"7","hashOfConfig":"6"},{"size":425,"mtime":1609389840446,"results":"8","hashOfConfig":"6"},{"size":3618,"mtime":1609731900749,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"12","usedDeprecatedRules":"13"},"1lig6h2",{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"13"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"13"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"20"},"E:\\ReactJS\\demo-webcam\\src\\App.tsx",["21","22"],"import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport WebCam from './components/webcam';\nimport WebCamHook from './components/webcam-hook';\n\nfunction App() {\n  return (\n    <div className = 'app_container'>\n      <span className = 'app_title'>DEMO WEBCAM</span>\n      <WebCam/>\n      {/* <WebCamHook/> */}\n      \n    </div>\n  );\n}\n\n\n\nexport default App;\n",["23","24"],"E:\\ReactJS\\demo-webcam\\src\\index.tsx",[],"E:\\ReactJS\\demo-webcam\\src\\reportWebVitals.ts",[],"E:\\ReactJS\\demo-webcam\\src\\components\\webcam.tsx",["25","26"],"import * as React from \"react\";\r\nimport Webcam from \"react-webcam\";\r\nimport { PreProcessedFileInfo } from \"typescript\";\r\nimport \"./webcam.css\";\r\n\r\ninterface Props {}\r\ninterface State {\r\n  screenshot: any;\r\n  tab: number;\r\n  recording: boolean;\r\n  recordedChunks: any;\r\n}\r\n\r\nclass WebCam extends React.PureComponent<Props, State> {\r\n  constructor(props: Props) {\r\n    super(props);\r\n    this.state = {\r\n      screenshot: null,\r\n      tab: 0,\r\n      recording: false,\r\n      recordedChunks: [],\r\n    };\r\n  }\r\n  webcamRef = React.createRef<Webcam>();\r\n  mediaRecorderRef = React.createRef<MediaRecorder>();\r\n  handleClick = () => {\r\n    const screenshot = this.webcamRef.current?.getScreenshot();\r\n    console.log(\"SCREEN SHOT : \", screenshot);\r\n\r\n    this.setState({ screenshot });\r\n  };\r\n  /// ------------------------------------------------\r\n  onStartRecord = () => {\r\n    this.setState({ recording: true });\r\n    // @ts-ignore\r\n    this.mediaRecorderRef.current = new MediaRecorder(\r\n      // @ts-ignore\r\n      this.webcamRef.current?.stream,\r\n      {\r\n        mimeType: \"video/webm;codecs=vp8\",\r\n      }\r\n    );\r\n    this.mediaRecorderRef.current.addEventListener(\r\n      \"dataavailable\",\r\n      this.handleDataAvailable\r\n    );\r\n    this.mediaRecorderRef.current.start();\r\n  };\r\n\r\n  /// --------------------------------------------------\r\n  //@ts-ignore\r\n  handleDataAvailable = ({data}) => {\r\n    if (data.size > 0) {\r\n      this.setState({ recordedChunks: this.state.recordedChunks.concat(data) });\r\n    }\r\n  };\r\n\r\n  /// ----------------------------------------------\r\n\r\n  onStopRecord = () => {\r\n    this.mediaRecorderRef.current?.stop();\r\n    this.setState({ recording: false });\r\n    \r\n  };\r\n\r\n  // ----------------\r\n  handleDownload = () => {\r\n    console.log('====================================');\r\n    console.log(\"RECORDS_CHUNKS : \", this.state.recordedChunks);\r\n    console.log('====================================');\r\n    if (this.state.recordedChunks.length) {\r\n      const blob = new Blob(this.state.recordedChunks, {\r\n        type: \"video/mp4\",\r\n      });\r\n      const url = URL.createObjectURL(blob);\r\n      const a = document.createElement(\"a\");\r\n      document.body.appendChild(a);\r\n      // @ts-ignore\r\n      a.style = \"display: none\";\r\n      a.href = url;\r\n      a.download = \"react-webcam.mp4\";\r\n      a.click();\r\n      window.URL.revokeObjectURL(url);\r\n      this.setState({ recordedChunks: [] });\r\n    }\r\n  };\r\n\r\n  //\r\n  renderButton = () => {\r\n    if (this.state.recording) {\r\n      return (\r\n        <button className=\"camera_button\" onClick={this.onStopRecord}>\r\n          stop record\r\n        </button>\r\n      );\r\n    } else {\r\n      return (\r\n        <button className=\"camera_button\" onClick={this.onStartRecord}>\r\n          start record\r\n        </button>\r\n      );\r\n    }\r\n  };\r\n\r\n  //\r\n\r\n  renderDowloadBtn = () => {\r\n    if (this.state.recordedChunks.length > 0) {\r\n      return (\r\n        <button className=\"camera_button\" onClick={this.handleDownload}>\r\n          Download\r\n        </button>\r\n      );\r\n    }\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"webcam_ctn\">\r\n        <Webcam\r\n          height={720}\r\n          width={1024}\r\n          mirrored={true}\r\n          screenshotFormat=\"image/jpeg\"\r\n          ref={this.webcamRef}\r\n        />\r\n        <div>\r\n          <button className=\"camera_button\" onClick={this.handleClick}>\r\n            Capture\r\n          </button>\r\n          {this.renderButton()}\r\n          {this.renderDowloadBtn()}\r\n        </div>\r\n        <img src = {this.state.screenshot}/>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default WebCam;\r\n",{"ruleId":"27","severity":1,"message":"28","line":2,"column":8,"nodeType":"29","messageId":"30","endLine":2,"endColumn":12},{"ruleId":"27","severity":1,"message":"31","line":5,"column":8,"nodeType":"29","messageId":"30","endLine":5,"endColumn":18},{"ruleId":"32","replacedBy":"33"},{"ruleId":"34","replacedBy":"35"},{"ruleId":"27","severity":1,"message":"36","line":3,"column":10,"nodeType":"29","messageId":"30","endLine":3,"endColumn":30},{"ruleId":"37","severity":1,"message":"38","line":134,"column":9,"nodeType":"39","endLine":134,"endColumn":45},"@typescript-eslint/no-unused-vars","'logo' is defined but never used.","Identifier","unusedVar","'WebCamHook' is defined but never used.","no-native-reassign",["40"],"no-negated-in-lhs",["41"],"'PreProcessedFileInfo' is defined but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","no-global-assign","no-unsafe-negation"]